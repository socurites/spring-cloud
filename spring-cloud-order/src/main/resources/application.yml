server:
  port: 0   # random port
spring:
  application:
    name: order-service
#  h2:
#    console:
#      enabled: true
##      settings:
##        web-allow-others: true
#  datasource:
#    url: jdbc:h2:mem:testdb   # needed after boot-2.5 /w data-jpa dependency
  datasource:
    url: jdbc:mariadb://localhost:3306/mydb
    username: root
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    show-sql: true
    hibernate:
#      ddl-auto: create-drop
      ddl-auto: none
  kafka:
    properties:
      bootstrap:
        servers: pkc-4v1gp.ap-northeast-1.aws.confluent.cloud:9092
      security:
        protocol: SASL_SSL
      sasl:
        mechanism: PLAIN
        jaas:
          config: "org.apache.kafka.common.security.plain.PlainLoginModule   required username='GA7AM2HHI2O42L2Q'   password='5i0exPKhSM+RdjIzz5QLynRdwYu0cHuhDpAK/t+vnST6dCZLjENvGM7iGCfAskc2';"
        producer:
          client-id: test-order-producer
          retries: 0
          acks: all
          key-serializer: org.apache.kafka.common.serialization.StringSerializer
          value-serializer: org.apache.kafka.common.serialization.StringSerializer
        #      batch-size:
#    consumer:
#      group-id: test-order-consumer-group
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      auto-offset-reset: earliest
#      enable-auto-commit: true
eureka:
  instance:
    instance-id: '${spring.application.name}:${spring.application.instance_id:${random.value}}'
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      deefaultZone: http://127.0.0.1:8761/eureka
management:
  endpoints:
    web:
      exposure:
        include:
          - refresh
          - health
          - beans
          #          - busrefresh
          - info
          - metrics
          - prometheus
app:
  kafka:
    topic: test-order.topic